// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	web2 "github.com/hyperledger-labs/fabric-smart-client/platform/view/services/server/web"
)

type Logger struct {
	DebugfStub        func(template string, args ...interface{})
	debugfMutex       sync.RWMutex
	debugfArgsForCall []struct {
		template string
		args     []interface{}
	}
	WarnfStub        func(template string, args ...interface{})
	warnfMutex       sync.RWMutex
	warnfArgsForCall []struct {
		template string
		args     []interface{}
	}
	InfofStub        func(template string, args ...interface{})
	infofMutex       sync.RWMutex
	infofArgsForCall []struct {
		template string
		args     []interface{}
	}
	ErrorfStub        func(template string, args ...interface{})
	errorfMutex       sync.RWMutex
	errorfArgsForCall []struct {
		template string
		args     []interface{}
	}
	WarnStub        func(args ...interface{})
	warnMutex       sync.RWMutex
	warnArgsForCall []struct {
		args []interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Logger) Debugf(template string, args ...interface{}) {
	fake.debugfMutex.Lock()
	fake.debugfArgsForCall = append(fake.debugfArgsForCall, struct {
		template string
		args     []interface{}
	}{template, args})
	fake.recordInvocation("Debugf", []interface{}{template, args})
	fake.debugfMutex.Unlock()
	if fake.DebugfStub != nil {
		fake.DebugfStub(template, args...)
	}
}

func (fake *Logger) DebugfCallCount() int {
	fake.debugfMutex.RLock()
	defer fake.debugfMutex.RUnlock()
	return len(fake.debugfArgsForCall)
}

func (fake *Logger) DebugfArgsForCall(i int) (string, []interface{}) {
	fake.debugfMutex.RLock()
	defer fake.debugfMutex.RUnlock()
	return fake.debugfArgsForCall[i].template, fake.debugfArgsForCall[i].args
}

func (fake *Logger) Warnf(template string, args ...interface{}) {
	fake.warnfMutex.Lock()
	fake.warnfArgsForCall = append(fake.warnfArgsForCall, struct {
		template string
		args     []interface{}
	}{template, args})
	fake.recordInvocation("Warnf", []interface{}{template, args})
	fake.warnfMutex.Unlock()
	if fake.WarnfStub != nil {
		fake.WarnfStub(template, args...)
	}
}

func (fake *Logger) WarnfCallCount() int {
	fake.warnfMutex.RLock()
	defer fake.warnfMutex.RUnlock()
	return len(fake.warnfArgsForCall)
}

func (fake *Logger) WarnfArgsForCall(i int) (string, []interface{}) {
	fake.warnfMutex.RLock()
	defer fake.warnfMutex.RUnlock()
	return fake.warnfArgsForCall[i].template, fake.warnfArgsForCall[i].args
}

func (fake *Logger) Infof(template string, args ...interface{}) {
	fake.infofMutex.Lock()
	fake.infofArgsForCall = append(fake.infofArgsForCall, struct {
		template string
		args     []interface{}
	}{template, args})
	fake.recordInvocation("Infof", []interface{}{template, args})
	fake.infofMutex.Unlock()
	if fake.InfofStub != nil {
		fake.InfofStub(template, args...)
	}
}

func (fake *Logger) InfofCallCount() int {
	fake.infofMutex.RLock()
	defer fake.infofMutex.RUnlock()
	return len(fake.infofArgsForCall)
}

func (fake *Logger) InfofArgsForCall(i int) (string, []interface{}) {
	fake.infofMutex.RLock()
	defer fake.infofMutex.RUnlock()
	return fake.infofArgsForCall[i].template, fake.infofArgsForCall[i].args
}

func (fake *Logger) Errorf(template string, args ...interface{}) {
	fake.errorfMutex.Lock()
	fake.errorfArgsForCall = append(fake.errorfArgsForCall, struct {
		template string
		args     []interface{}
	}{template, args})
	fake.recordInvocation("Errorf", []interface{}{template, args})
	fake.errorfMutex.Unlock()
	if fake.ErrorfStub != nil {
		fake.ErrorfStub(template, args...)
	}
}

func (fake *Logger) ErrorfCallCount() int {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	return len(fake.errorfArgsForCall)
}

func (fake *Logger) ErrorfArgsForCall(i int) (string, []interface{}) {
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	return fake.errorfArgsForCall[i].template, fake.errorfArgsForCall[i].args
}

func (fake *Logger) Warn(args ...interface{}) {
	fake.warnMutex.Lock()
	fake.warnArgsForCall = append(fake.warnArgsForCall, struct {
		args []interface{}
	}{args})
	fake.recordInvocation("Warn", []interface{}{args})
	fake.warnMutex.Unlock()
	if fake.WarnStub != nil {
		fake.WarnStub(args...)
	}
}

func (fake *Logger) WarnCallCount() int {
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	return len(fake.warnArgsForCall)
}

func (fake *Logger) WarnArgsForCall(i int) []interface{} {
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	return fake.warnArgsForCall[i].args
}

func (fake *Logger) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.debugfMutex.RLock()
	defer fake.debugfMutex.RUnlock()
	fake.warnfMutex.RLock()
	defer fake.warnfMutex.RUnlock()
	fake.infofMutex.RLock()
	defer fake.infofMutex.RUnlock()
	fake.errorfMutex.RLock()
	defer fake.errorfMutex.RUnlock()
	fake.warnMutex.RLock()
	defer fake.warnMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Logger) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ web2.Logger = new(Logger)
